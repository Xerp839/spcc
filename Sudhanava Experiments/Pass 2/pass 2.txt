/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
// #include <stdio.h>
// #include <string.h>
// #include <stdlib.h>

// void passOne(char label[10], char opcode[10], char operand[10], char code[10], char mnemonic[3]);
// void display();

// int main()
// {
//     // for reading from input
//     char label[10], opcode[10], operand[10];
//     // for reading from optab
//     char code[10], mnemonic[3];
//     // call the function
//     passOne(label, opcode, operand, code, mnemonic);

//     return 0;
// }

// void passOne(char label[10], char opcode[10], char operand[10], char code[10], char mnemonic[3]) 
// {
//     int locctr, start, length;

//     FILE *fp1, *fp2, *fp3, *fp4, *fp5;                                    // file pointers

//     // read mode
//     fp1 = fopen("input.txt", "r");
//     fp2 = fopen("optab.txt", "r");
//     // write mode
//     fp3 = fopen("symtab.txt", "w");
//     fp4 = fopen("intermediate.txt", "w");
//     fp5 = fopen("length.txt", "w");

//     fscanf(fp1, "%s\t%s\t%s", label, opcode, operand);              // read first line

//     if (strcmp(opcode, "START") == 0) {                       
//         // atoi() requires stdlib.h header file
//         start = atoi(operand);                                      // convert operand value from string to integer and assign to start
//         locctr = start;
//         fprintf(fp4, "\t%s\t%s\t%s\n", label, opcode, operand);     // write to output file (additional tab space as start will not have any locctr)
//         fscanf(fp1, "%s\t%s\t%s", label, opcode, operand);          // read next line
//     } 
//     else {
//         locctr = 0;
//     }

//     // iterate till end
//     while (strcmp(opcode, "END") != 0) {

//         // 1. transfer address and read line to output file
//         fprintf(fp4, "%d\t%s\t%s\t%s\n", locctr, label, opcode, operand);

//         // 2. make symtab file with values not starting with **
//         if (strcmp(label, "**") != 0) {
//             fprintf(fp3, "%s\t%d\n", label, locctr);
//         }

//         // 3. read from optab (code and mnemonic value)
//         fscanf(fp2, "%s\t%s", code, mnemonic);

//         // 4. traverse till the end of optab file
//         while (strcmp(code, "END") != 0) {
//             if (strcmp(opcode, code) == 0) {                        // if opcode in input matches the one in optab, increment locctr by 3
//                 locctr += 3;
//                 break;
//             }
//             // read next line
//             fscanf(fp2, "%s\t%s", code, mnemonic);
//         }

//         // 5. Searching opcode for WORD, RESW, BYTE, RESB keywords and updating locctr
        
//                 // WORD -> add 3 to locctr
//         if (strcmp(opcode, "WORD") == 0) {
//             locctr += 3;
//         }
//                 // RESW -> add 3*operand to locctr
//         else if (strcmp(opcode, "RESW") == 0) {
//             locctr += (3 * (atoi(operand)));                        // convert operand to integer and multiply with 3
//         }
//                 // BYTE -> add 1 to locctr 
//         else if (strcmp(opcode, "BYTE") == 0) {
//             ++locctr;
//         }
//                 // RESB -> add operand to locctr
//         else if (strcmp(opcode, "RESB") == 0) {
//             locctr += atoi(operand);
//         }
        
//         // read next line
//         fscanf(fp1, "%s\t%s\t%s", label, opcode, operand);
//     }
//     // 6. transfer last line to file
//     fprintf(fp4, "%d\t%s\t%s\t%s\n", locctr, label, opcode, operand);

//     // 7. Close all files
//     fclose(fp4);
//     fclose(fp3);
//     fclose(fp2);
//     fclose(fp1);

//     // 8. display outputs
//     display();
    
//     // 9. calculate length of program
//     length = locctr - start;
//     fprintf(fp5, "%d", length);
//     fclose(fp5);
//     printf("\nThe length of the code : %d\n", length);
// }

// void display() {

//     char str;
//     FILE *fp1, *fp2, *fp3;   

//     // 1. Input Table
//     printf("\nThe contents of Input Table :\n\n");
//     fp1 = fopen("input.txt", "r");
//     str = fgetc(fp1);
//     while (str != EOF) {
//         printf("%c", str);
//         str = fgetc(fp1);
//     }
//     fclose(fp1);

//     //2. Output Table
//     printf("\n\nThe contents of Output Table :\n\n");
//     fp2 = fopen("intermediate.txt", "r");
//     str = fgetc(fp2);
//     while (str != EOF) {
//         printf("%c", str);
//         str = fgetc(fp2);
//     }
//     fclose(fp2);

//     // 3. Symtable
//     printf("\n\nThe contents of Symbol Table :\n\n");
//     fp3 = fopen("symtab.txt", "r");
//     str = fgetc(fp3);
//     while (str != EOF) {
//         printf("%c", str);
//         str = fgetc(fp3);
//     }
//     fclose(fp3);
// }







//pass2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void display();

int main()
{
    char a[10], ad[10], label[10], opcode[10], operand[10], symbol[10];
    int start, diff, i, address, add, len, actual_len, finaddr, prevaddr, j = 0;
    char mnemonic[15][15] = {"LDA", "STA", "LDCH", "STCH"};
    char code[15][15] = {"33", "44", "53", "57"};

    FILE *fp1, *fp2, *fp3, *fp4;
    fp1 = fopen("output.txt", "w");
    fp2 = fopen("symtab.txt", "r");
    fp3 = fopen("intermediate.txt", "r");
    fp4 = fopen("objcode.txt", "w");

    fscanf(fp3, "%s\t%s\t%s", label, opcode, operand);

    while (strcmp(opcode, "END") != 0)
    {
        prevaddr = address;
        fscanf(fp3, "%d%s%s%s", &address, label, opcode, operand);
    }
    finaddr = address;
    
    fclose(fp3);
    fp3 = fopen("intermediate.txt", "r");

    fscanf(fp3, "\t%s\t%s\t%s", label, opcode, operand);
    if (strcmp(opcode, "START") == 0)
    {
        fprintf(fp1, "\t%s\t%s\t%s\n", label, opcode, operand);
        fprintf(fp4, "H^%s^00%s^00%d\n", label, operand, finaddr);
        fscanf(fp3, "%d%s%s%s", &address, label, opcode, operand);
        start = address;
        diff = prevaddr - start;
        fprintf(fp4, "T^00%d^%d", address, diff);
    }

    while (strcmp(opcode, "END") != 0)
    {
        if (strcmp(opcode, "BYTE") == 0)
        {
            fprintf(fp1, "%d\t%s\t%s\t%s\t", address, label, opcode, operand);
            len = strlen(operand);
            actual_len = len - 3;
            fprintf(fp4, "^");
            for (i = 2; i < (actual_len + 2); i++)
            {   
                sprintf(ad, "%X", operand[i]);
                fprintf(fp1, "%s", ad);
                fprintf(fp4, "%s", ad);
            }
            fprintf(fp1, "\n");
        }

        else if (strcmp(opcode, "WORD") == 0)
        {
            len = strlen(operand);
            sprintf(ad, "%X", operand[i]);
            fprintf(fp1, "%d\t%s\t%s\t%s\t00000%s\n", address, label, opcode, operand, a);
            fprintf(fp4, "^00000%s", a);
        }

        else if ((strcmp(opcode, "RESB") == 0) || (strcmp(opcode, "RESW") == 0)) {
            fprintf(fp1, "%d\t%s\t%s\t%s\n", address, label, opcode, operand);
        }

        else
        {
            while (strcmp(opcode, mnemonic[j]) != 0)
                j++;
            if (strcmp(operand, "COPY") == 0)
                fprintf(fp1, "%d\t%s\t%s\t%s\t%s0000\n", address, label, opcode, operand, code[j]);
            else
            {
                rewind(fp2);
                fscanf(fp2, "%s%d", symbol, &add);
                while (strcmp(operand, symbol) != 0)
                    fscanf(fp2, "%s%d", symbol, &add);
                fprintf(fp1, "%d\t%s\t%s\t%s\t%s%d\n", address, label, opcode, operand, code[j], add);
                fprintf(fp4, "^%s%d", code[j], add);
            }
        }

        fscanf(fp3, "%d%s%s%s", &address, label, opcode, operand);
    }

    fprintf(fp1, "%d\t%s\t%s\t%s\n", address, label, opcode, operand);
    fprintf(fp4, "\nE^00%d", start);
    
    fclose(fp4);
    fclose(fp3);
    fclose(fp2);
    fclose(fp1);

    display();

    return 0;
}

void display() {
    char ch;
    FILE *fp1, *fp2, *fp3, *fp4;

    printf("\nIntermediate file is converted into object code");

    printf("\n\nThe contents of Intermediate file:\n\n");
    fp3 = fopen("intermediate.txt", "r");
    ch = fgetc(fp3);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp3);
    }
    fclose(fp3);

    printf("\n\nThe contents of Symbol Table :\n\n");
    fp2 = fopen("symtab.txt", "r");
    ch = fgetc(fp2);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp2);
    }
    fclose(fp2);

    printf("\n\nThe contents of Output file :\n\n");
    fp1 = fopen("output.txt", "r");
    ch = fgetc(fp1);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp1);
    }
    fclose(fp1);

    printf("\n\nThe contents of Object code file :\n\n");
    fp4 = fopen("objcode.txt", "r");
    ch = fgetc(fp4);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp4);
    }
    fclose(fp4);

}

/* 

    intermediate.txt
    ----------------

            **      START   2000
    2000    **      LDA     FIVE
    2003    **      STA     ALPHA
    2006    **      LDCH    CHARZ
    2009    **      STCH    C1
    2012    ALPHA   RESW    2
    2018    FIVE    WORD    5
    2021    CHARZ   BYTE    C'Z'
    2022    C1      RESB    1
    2023    **      END     **

    symtab.txt
    ----------

    ALPHA   2012
    FIVE    2018
    CHARZ   2021
    C1      2022

    -----------------------------

    output.txt
    ----------

            **      START   2000
    2000    **      LDA     FIVE    332018
    2003    **      STA     ALPHA   442012
    2006    **      LDCH    CHARZ   532021
    2009    **      STCH    C1      572022
    2012    ALPHA   RESW    2
    2018    FIVE    WORD    5       000005
    2021    CHARZ   BYTE    C'Z'    5a
    2022    C1      RESB    1
    2023    **      END     **

    objcode.txt
    -----------

    H^**^002000^002023
    T^002000^22^332018^442012^532021^572022^000005^5a
    E^002000

*/

